package com.nagarciah.tinypim.entity;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.ManyToOne;
import javax.validation.constraints.NotNull;

@Entity
public class Category {

	/**
	 * We could use an autogenerated id from the DB for simplicity. Of course, the
	 * id type and the strategy to generate it, will depend completely on the
	 * environment and non-functional requirements, for example, in a distributed,
	 * asynchronous, highly transactional environment, it might be better to use
	 * strings or UUIDs maybe generated by the client. As another option, here we
	 * also could use different fields for the id (as row identifier) and the "key"
	 * assigned from the data import (as category identifier)
	 */
	@Id
	@GeneratedValue(strategy = GenerationType.TABLE)
	private Long id;

	@NotNull
	@Column(nullable = false)
	private String name;

	// We could decide here, depending on the requirements, to return the whole
	// parent tree for a specific category...
	@ManyToOne
	Category parent;

	// ... or just the parent id
	public Long getParentId() {
		return parent == null ? null : parent.getId();
	}

	// I have no time to debug Lombok setup which is not working, so let's simply
	// use traditional getters/setters:
	public Long getId() {
		return id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public Category getParent() {
		return parent;
	}

	public void setParent(Category parent) {
		this.parent = parent;
	}

}
